#include "thingProperties.h"
#include <ESP8266WiFi.h>
#include <espnow.h>
int count = 0;

// Structure example to receive data
// Must match the sender structure
typedef struct struct_message {
  char a[32];
  int b;
  float c;
  String d;
  bool e;
} struct_message;

// Create a struct_message called myData
struct_message myData;

// Callback function that will be executed when data is received
void OnDataRecv(uint8_t * mac, uint8_t *incomingData, uint8_t len) {
  memcpy(&myData, incomingData, sizeof(myData));
  Serial.print("Bytes received: ");
  Serial.println(len);
  Serial.print("Char: ");
  Serial.println(myData.a);
  Serial.print("Int: ");
  Serial.println(myData.b);
  Serial.print("Float: ");
  Serial.println(myData.c);
  Serial.print("String: ");
  Serial.println(myData.d);
  Serial.print("Bool: ");
  Serial.println(myData.e);
  Serial.println();
}

void setup() {
  pinMode(2, OUTPUT);
  // Initialize serial and wait for port to open:
  Serial.begin(115200);

  Serial.print("ESP8266 Board MAC Address:  ");
  Serial.println(WiFi.macAddress());
  waterDetection = false;
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != 0) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Once ESPNow is successfully Init, we will register for recv CB to
  // get recv packer info
  esp_now_set_self_role(ESP_NOW_ROLE_SLAVE);
  esp_now_register_recv_cb(OnDataRecv);
  Serial.setTimeout(2000);

  // Wait for serial to initialize.
  while (!Serial) { }

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

}

void loop() {

  // Your code here
  if (myData.b == 1) {
    //there is a water leaking !!
    onWaterDetectionChange();
    digitalWrite(2, LOW);
    //Serial.println("Sending Message to youre phone, myData = " + String(myData.b) );
    ArduinoCloud.update();
  }
  else {
    digitalWrite(2, HIGH);
    count = 0;
  }
  delay(30);
}


/*
  Since WaterDetection is READ_WRITE variable, onWaterDetectionChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onWaterDetectionChange()  {
  // Add your code here to act upon WaterDetection change
  if (myData.b == 1 && count < 100) {
    waterDetection = true;
    count++;
    // Serial.println(count);
  }

}







